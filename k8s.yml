apiVersion: v1
kind: Service
metadata:
  name: api-frontend-nginx-test
  labels:
    name: api-frontend-nginx-test
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 'http'
      name: 'http'
    - port: 443
      targetPort: 'https'
      name: 'https'
    - port: 5000
      targetPort: 'certbot'
      name: 'certbot'
  selector:
    name: api-frontend-nginx-test
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: letsencrypt-claim
  annotations:
    volume.beta.kubernetes.io/storage-class: "slow"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: api-frontend-nginx-test
  labels:
    name: api-frontend-nginx-test
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: api-frontend-nginx-test
    spec:
      containers:
      - name: nginx
        image: gcr.io/new-dito/nginx-ssl-proxy:0.0.1-beta9
        volumeMounts:
        - name: letsencrypt
          mountPath: /etc/letsencrypt
        - name: public
          mountPath: /public
        - name: your-dhparam
          mountPath: /etc/secrets
          readOnly: true
        ports:
        - containerPort: 80
          name: 'http'
        - containerPort: 443
          name: 'https'
        env:
        - name: ENABLE_SSL
          value: "true"
        - name: TARGET_SERVICE
          value: api-frontend-public
        - name: SERVER_NAME
          value: domain.example.com
        - name: SSL_CERTIFICATE
          value: /etc/letsencrypt/live/domain.example.com/fullchain.pem
        - name: SSL_CERTIFICATE_KEY
          value: /etc/letsencrypt/live/domain.example.com/privkey.pem
      - name: certbot
        image: gcr.io/new-dito/certbot-server:0.0.1-beta4
        volumeMounts:
        - name: letsencrypt
          mountPath: /etc/letsencrypt
        - name: public
          mountPath: /public
        ports:
        - containerPort: 5000
          name: 'certbot'
        env:
        - name: BASIC_AUTH_USERNAME
          value: dito
        - name: BASIC_AUTH_PASSWORD
          value: dito2017
        command: ["python", "server.py"]
      volumes:
      - name: letsencrypt
        persistentVolumeClaim:
          claimName: letsencrypt-claim
      - name: public
        emptyDir: {}
      - name: your-dhparam
        secret:
          secretName: your-dhparam
          items:
          - key: dhparam.pem
            path: dhparam
